name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: 0 3 * * *
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      python-cache-key: ${{ steps.cache-key.outputs.key }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Get cache key
      id: cache-key
      run: echo "key=${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'requirements-dev.txt') }}" >> $GITHUB_OUTPUT

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ steps.cache-key.outputs.key }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install core dependencies
      run: pip install -r requirements.txt

    - name: Install development dependencies
      run: pip install -r requirements-dev.txt

    - name: Lint utilities.py and config.py
      run: |
        pylint utilities.py config.py || true

  models:
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        model: [
          'decision_tree',
          'neural_network',
          'statistical_model',
          'ml_model',
          'neural_model',
          'transformer_model'
        ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.python-cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -r requirements-${{ matrix.model }}.txt

    - name: Run pylint on ${{ matrix.model }}
      run: pylint ${{ matrix.model }}.py || true

    - name: Execute ${{ matrix.model }} script
      run: python ${{ matrix.model }}.py

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.model }}-outputs
        path: |
          ${{ matrix.model }}.html
          ${{ matrix.model }}.png
        retention-days: 1

  commit:
    runs-on: ubuntu-latest
    needs: models
    permissions:
      contents: write
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'schedule')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install core dependencies
      run: pip install -r requirements.txt

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Move artifacts to root
      run: |
        find . -name "*.html" -path "./*-outputs/*" -exec mv {} . \;
        find . -name "*.png" -path "./*-outputs/*" -exec mv {} . \;

    - name: Commit and push changes
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'schedule')
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        # Add all generated files
        git add *.html *.png || true

        # Check if there are any changes to commit
        if ! git diff --quiet --cached; then
          git commit -m "Update model outputs [skip ci]"
          git push
        else
          echo "No changes to commit"
        fi
